import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class passOne {
	public void getFileName() throws IOException {
		String fileName = "program.asm";
		parseFile(fileName);
	}
	public void parseFile(String file) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(file));
		BufferedWriter inter = new BufferedWriter(new FileWriter("inter"));
		BufferedWriter symtab = new BufferedWriter(new FileWriter("symtab"));
		BufferedWriter littab = new BufferedWriter(new FileWriter("littab"));
		BufferedWriter pooltab = new BufferedWriter(new FileWriter("pooltab"));
		HashMap<String, ArrayList<String>> symbolTable = new HashMap<String, ArrayList<String>>();
		MnemonicTable mn = new MnemonicTable();
		String s = "";
		String[] str;
		Integer lc = 0, symbolID = 0, x=0;
		ICLine inst;
		ArrayList<String> list = new ArrayList<>();
		while((s=br.readLine())!=null) {
			str = s.split("\\s+");
			if(s.contains("START")) {
				lc = Integer.parseInt(str[1]);
				inst = mn.getInstruction(str[0]);
				inter.write("\t" + "(" + inst.getType() + ", " + inst.getCode() + ")");
				inter.write("\t" + "(" + "C, " + String.valueOf(lc) + ")" + "\n");
				continue;
			}
			if(mn.getInstruction(str[0]) == null) {
				list = new ArrayList<>();
				list.add(String.valueOf(symbolID));
				list.add(String.valueOf(lc));
				symbolTable.put(str[0], list);
				System.out.println(symbolTable.get(str[0]).get(1));
				x = 1;	//Has Symbol so instruction @ str[1]
			}
			else {
				x = 0;	//Not having symbol
			}
			inst = mn.getInstruction(str[x]);
			inter.write(String.valueOf(lc));
			inter.write("\t" + "(" + inst.getType() + ", " + inst.getCode() + ")");
			//Processing operand
			if(str.length>2) {
				inter.write(str[x+1] + "\n");
			}
			else {
				inter.write("\n");
			}
			lc++;
		}
		inter.close();
		littab.close();
		pooltab.close();
		symtab.close();
	}
	public static void main(String[] args) {
		passOne p1 = new passOne();
		try {
			p1.getFileName();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
