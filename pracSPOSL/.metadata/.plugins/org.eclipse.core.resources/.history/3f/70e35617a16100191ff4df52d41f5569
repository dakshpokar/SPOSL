import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class passOne {
	public void getFileName() throws IOException {
		String fileName = "program.asm";
		parseFile(fileName);
	}
	public void parseFile(String file) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(file));
		BufferedWriter inter = new BufferedWriter(new FileWriter("inter"));
		BufferedWriter symtab = new BufferedWriter(new FileWriter("symtab"));
		BufferedWriter littab = new BufferedWriter(new FileWriter("littab"));
		BufferedWriter pooltab = new BufferedWriter(new FileWriter("pooltab"));
		HashMap<String, ArrayList<String>> symbolTable = new HashMap<String, ArrayList<String>>();
		HashMap<String, ArrayList<String>> literalTable = new HashMap<String, ArrayList<String>>();
		HashMap<Integer, Integer> poolTable = new HashMap<Integer, Integer>();
		
		MnemonicTable mn = new MnemonicTable();
		String s = "";
		String[] str;
		Integer lc = 0, symbolID = 0, x=0, literalID = 0, processPool = 0;
		boolean ltorg = false;
		ICLine inst;
		ArrayList<String> list = new ArrayList<>();
		while((s=br.readLine())!=null) {
			str = s.split("\\s+");
			if(s.contains("START")) {
				lc = Integer.parseInt(str[1]);
				inst = mn.getInstruction(str[0]);
				inter.write("\t" + "(" + inst.getType() + ", " + inst.getCode() + ")");
				inter.write("\t" + "(" + "C, " + String.valueOf(lc) + ")" + "\n");
				continue;
			}
			
			if(s.contains("LTORG")) {
				ltorg = true;
				x = poolTable.get(processPool);
				System.out.println(processPool);
			}
			if(mn.getInstruction(str[0]) == null) {
				list = new ArrayList<>();
				list.add(String.valueOf(symbolID));	//list[0] == id
				list.add(String.valueOf(lc));	//list[1] == address
				symbolID++;
				symbolTable.put(str[0], list);
				System.out.println(symbolTable.get(str[0]).get(1));
				x = 1;	//Has Symbol so instruction @ str[1]
			}
			else {
				x = 0;	//Not having symbol
			}
			if(s.contains("STOP")) {
				continue;
			}
			else {
				inst = mn.getInstruction(str[x]);
				inter.write(String.valueOf(lc));
				inter.write("\t" + "(" + inst.getType() + ", " + inst.getCode() + ")");
				//Processing operand
				System.out.println(s);
				if(str.length>1) {
					if(str[x+1].contains(",")) {
						String[] splt = str[x+1].split(",");
						inst = mn.getInstruction(splt[0]);
						inter.write("\t" + "(" + inst.getType() + ", " + inst.getCode() + ")");
						
						//splt[1] can be symbol or literal
						if(splt[1].contains("=")) {
							list = new ArrayList<>();
							literalTable.put(splt[1], list);
							list.add(String.valueOf(literalID));
							literalID++;
							if(poolTable.get(processPool) == null) {
								poolTable.put(processPool, literalID);
							}
							inter.write("\t" + "(" + "L, " + list.get(0) + ")" + "\n");
							
						}
						else {
							if(symbolTable.get(splt[1]) == null || symbolTable.get(splt[1]).size() == 0) {	//Forward Reference
								list = new ArrayList<>();
								list.add(String.valueOf(symbolID));
								symbolID++;
								symbolTable.put(splt[1], list); //Backpatching need 
								inter.write("\t" + "(" + "S, " + list.get(0) + ")" + "\n");

							}
							else {
								list = symbolTable.get(splt[1]);
								inter.write("\t" + "(" + "S, " + list.get(0) + ")" + "\n");
							}
						}
					}
					inter.write("\n");
				}
				else {
					inter.write("\n");
				}
			}
			lc++;
		}
		inter.close();
		littab.close();
		pooltab.close();
		symtab.close();
	}
	public static void main(String[] args) {
		passOne p1 = new passOne();
		try {
			p1.getFileName();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
